import React, { useState, useEffect } from "react";
import { supabase } from "../utils/db";
// import env from "../utils/env";
// import Replicate from "replicate";
import { imageGenerationPrompt } from "../utils/ai";

interface FeedbackType {
  id: number;
  email: string;
  feedback: string;
  sentiment: number;
  overview: string;
  created_at: string;
}

const images = [
  "https://github.com/karthikeyaveruturi/tempstoragecdn/raw/refs/heads/main/replicate-prediction-q5gr0033hsrm60cjgsqb3s88z0.webp",
  "https://github.com/karthikeyaveruturi/tempstoragecdn/raw/refs/heads/main/replicate-prediction-b7mfdx84ghrm20cjgtrsw8tzy8.webp",
  "https://github.com/karthikeyaveruturi/tempstoragecdn/raw/refs/heads/main/replicate-prediction-9s5z0kj2z9rm60cjgsqravp5wm.webp",
  "https://raw.githubusercontent.com/karthikeyaveruturi/tempstoragecdn/refs/heads/main/replicate-prediction-2v1kxr5ca9rm20cjgtrs1eka0c.webp",
  "https://github.com/karthikeyaveruturi/tempstoragecdn/raw/refs/heads/main/replicate-prediction-h7gh1nng0srm20cjgtsb02jfcm.webp",
  "https://github.com/karthikeyaveruturi/tempstoragecdn/raw/refs/heads/main/replicate-prediction-n7qsspd74srm40cjgsraa77t0c.webp",
  "https://github.com/karthikeyaveruturi/tempstoragecdn/raw/refs/heads/main/replicate-prediction-xwmbjfgb4hrm60cjgts83jxxvg.webp",
];

const ImageGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState("");
  // const [generatedImage, setGeneratedImage] = useState<string[]>([]);
  // const rep = new Replicate({
  //   auth: env.REPLICATE_KEY,
  // });

  const handleGenerateImage = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const aiprompt = await imageGenerationPrompt(prompt);
      if (!aiprompt.success) console.log("AI prompt generation failed");
      console.log(aiprompt);
      setPrompt(aiprompt.prompt);

      // this part is commented because it throws an CORS error - to solve we need authentication and shall request from backend
      // this part of code is used to generate image using AI

      // const output = await rep.run("black-forest-labs/flux-schnell", {
      //   input: {
      //     prompt: aiprompt,
      //     aspect_ratio: "2:3",
      //   },
      // });

      // if (!output) throw new Error("Error generating image");
      // const image = output as string[];
      // console.log(image);

      // setGeneratedImage((prev) => [image[0], ...prev]);
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <div className="image-generator">
      <h3>Generate Image for Social Media</h3>
      <form onSubmit={handleGenerateImage}>
        <input
          type="text"
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Describe your business in a few words..."
          className="form-input"
        />
        <button type="submit" className="form-button">
          Generate Image
        </button>
      </form>
      <h3>Images generated by AI </h3>
      <p>
        ai model used -{" "}
        <a href="https://replicate.com/black-forest-labs/flux-schnell">
          flux schnell
        </a>{" "}
      </p>

      {images.map((gen, index) => {
        return (
          <div className="generated-image">
            <img key={index} src={gen} alt="Generated Image" />;
          </div>
        );
      })}
    </div>
  );
};

const Admin: React.FC = () => {
  const [activeTab, setActiveTab] = useState<"feedbacks" | "image-generator">(
    "feedbacks"
  );
  const [feedbacks, setFeedbacks] = useState<FeedbackType[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (activeTab === "feedbacks") {
      fetchFeedbacks();
    }
  }, [activeTab]);

  const fetchFeedbacks = async () => {
    try {
      const { data, error } = await supabase
        .from("feedbacks")
        .select("*")
        .order("created_at", { ascending: false });

      if (error) throw error;
      setFeedbacks(data);
    } catch (error) {
      console.error("Error fetching feedbacks:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container">
      <div className="tabs">
        <button
          className={`tab-button ${activeTab === "feedbacks" ? "active" : ""}`}
          onClick={() => setActiveTab("feedbacks")}
        >
          Customer Feedbacks
        </button>
        <button
          className={`tab-button ${
            activeTab === "image-generator" ? "active" : ""
          }`}
          onClick={() => setActiveTab("image-generator")}
        >
          Generate Image
        </button>
      </div>

      {activeTab === "feedbacks" && (
        <div className="feedbacks-tab">
          <h2 className="admin-title">Customer Feedbacks</h2>
          {loading ? (
            <p>Loading feedbacks...</p>
          ) : (
            <div className="feedback-list">
              {feedbacks.map((feedback) => (
                <div key={feedback.id} className="feedback-item">
                  <p className="feedback-email">
                    <strong>Email:</strong> {feedback.email}
                  </p>
                  <p className="feedback-text">
                    <strong>Feedback:</strong> {feedback.feedback}
                  </p>
                  <p className="feedback-sentiment">
                    <strong>Sentiment Score:</strong> {feedback.sentiment}
                    {" - "}
                    {feedback.sentiment === 0
                      ? "Bad"
                      : feedback.sentiment === 1
                      ? "Neutral"
                      : "Good"}
                  </p>
                  <p className="feedback-overview">
                    <strong>AI Overview:</strong> {feedback.overview}
                  </p>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {activeTab === "image-generator" && <ImageGenerator />}
    </div>
  );
};

export default Admin;
